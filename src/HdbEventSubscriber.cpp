/*----- PROTECTED REGION ID(HdbEventSubscriber.cpp) ENABLED START -----*/
#include "hdb++/AbstractDB.h"
static const char *RcsId = "$Id: HdbEventSubscriber.cpp,v 1.8 2014-03-07 14:05:54 graziano Exp $";
//=============================================================================
//
// file :        HdbEventSubscriber.cpp
//
// description : C++ source for the HdbEventSubscriber and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               HdbEventSubscriber are implemented in this file.
//
// project :     Tango Device Server.
//
// $Author: graziano $
//
// $Revision: 1.8 $
// $Date: 2014-03-07 14:05:54 $
//
// SVN only:
// $HeadURL$
//
// CVS only:
// $Source: /home/cvsadm/cvsroot/fermi/servers/hdb++/hdb++es/src/HdbEventSubscriber.cpp,v $
// $Log: HdbEventSubscriber.cpp,v $
// Revision 1.8  2014-03-07 14:05:54  graziano
// added ResetStatistics command
//
// Revision 1.7  2014-03-06 15:21:43  graziano
// StartArchivingAtStartup,
// start_all and stop_all,
// archiving of first event received at subscribe
//
// Revision 1.6  2014-02-20 15:17:29  graziano
// name and path fixing
// regenerated with new pogo
// added StartArchivingAtStartup property
//
// Revision 1.5  2013-09-02 12:18:46  graziano
// cleaned
//
// Revision 1.4  2013-08-26 13:24:57  graziano
// added transformation to lowercase
//
// Revision 1.3  2013-08-23 10:04:53  graziano
// development
//
// Revision 1.2  2013-08-14 13:10:07  graziano
// development
//
// Revision 1.1  2013-07-17 13:37:43  graziano
// *** empty log message ***
//
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <tango.h>
#include <HdbEventSubscriber.h>
#include <HdbEventSubscriberClass.h>
#include "StatsThread.h"
#include "SubscribeThread.h"
#include "PushThread.h"
#include "Consts.h"
#include <ctime>
#include <sstream>
#include <iomanip>

/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber.cpp

/**
 *  HdbEventSubscriber class description:
 *    This class is able to subscribe on archive events and store value in Historical DB
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name          |  Method name
//================================================================
//  State                 |  Inherited (no method)
//  Status                |  Inherited (no method)
//  AttributeAdd          |  attribute_add
//  AttributeRemove       |  attribute_remove
//  AttributeStatus       |  attribute_status
//  Start                 |  start
//  Stop                  |  stop
//  AttributeStart        |  attribute_start
//  AttributeStop         |  attribute_stop
//  ResetStatistics       |  reset_statistics
//  Pause                 |  pause
//  AttributePause        |  attribute_pause
//  SetAttributeStrategy  |  set_attribute_strategy
//  GetAttributeStrategy  |  get_attribute_strategy
//  StopFaulty            |  stop_faulty
//  SetAttributeTTL       |  set_attribute_ttl
//  GetAttributeTTL       |  get_attribute_ttl
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  AttributeOkNumber           |  Tango::DevLong	Scalar
//  AttributeNokNumber          |  Tango::DevLong	Scalar
//  AttributePendingNumber      |  Tango::DevLong	Scalar
//  AttributeNumber             |  Tango::DevLong	Scalar
//  AttributeMaxStoreTime       |  Tango::DevDouble	Scalar
//  AttributeMinStoreTime       |  Tango::DevDouble	Scalar
//  AttributeMaxProcessingTime  |  Tango::DevDouble	Scalar
//  AttributeMinProcessingTime  |  Tango::DevDouble	Scalar
//  AttributeRecordFreq         |  Tango::DevDouble	Scalar
//  AttributeFailureFreq        |  Tango::DevDouble	Scalar
//  AttributeStartedNumber      |  Tango::DevLong	Scalar
//  AttributeStoppedNumber      |  Tango::DevLong	Scalar
//  AttributeMaxPendingNumber   |  Tango::DevLong	Scalar
//  StatisticsResetTime         |  Tango::DevDouble	Scalar
//  AttributePausedNumber       |  Tango::DevLong	Scalar
//  Context                     |  Tango::DevString	Scalar
//  AttributeList               |  Tango::DevString	Spectrum  ( max = 10000)
//  AttributeOkList             |  Tango::DevString	Spectrum  ( max = 10000)
//  AttributeNokList            |  Tango::DevString	Spectrum  ( max = 10000)
//  AttributePendingList        |  Tango::DevString	Spectrum  ( max = 10000)
//  AttributeRecordFreqList     |  Tango::DevDouble	Spectrum  ( max = 10000)
//  AttributeFailureFreqList    |  Tango::DevDouble	Spectrum  ( max = 10000)
//  AttributeStartedList        |  Tango::DevString	Spectrum  ( max = 10000)
//  AttributeStoppedList        |  Tango::DevString	Spectrum  ( max = 10000)
//  AttributeEventNumberList    |  Tango::DevLong	Spectrum  ( max = 10000)
//  AttributeErrorList          |  Tango::DevString	Spectrum  ( max = 10000)
//  AttributePausedList         |  Tango::DevString	Spectrum  ( max = 10000)
//  AttributeStrategyList       |  Tango::DevString	Spectrum  ( max = 10000)
//  ContextsList                |  Tango::DevString	Spectrum  ( max = 1000)
//  AttributeTTLList            |  Tango::DevULong	Spectrum  ( max = 10000)
//================================================================

namespace HdbEventSubscriber_ns
{
    /*----- PROTECTED REGION ID(HdbEventSubscriber::namespace_starting) ENABLED START -----*/

    //	static initializations

    /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::namespace_starting

    //--------------------------------------------------------
    /**
     *	Method      : HdbEventSubscriber::HdbEventSubscriber()
     *	Description : Constructors for a Tango device
     *                implementing the classHdbEventSubscriber
     */
    //--------------------------------------------------------
    HdbEventSubscriber::HdbEventSubscriber(Tango::DeviceClass *cl, string &s)
        : TANGO_BASE_CLASS(cl, s.c_str())
    {
        /*----- PROTECTED REGION ID(HdbEventSubscriber::constructor_1) ENABLED START -----*/

        init_device();

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::constructor_1
    }
    //--------------------------------------------------------
    HdbEventSubscriber::HdbEventSubscriber(Tango::DeviceClass *cl, const char *s)
        : TANGO_BASE_CLASS(cl, s)
    {
        /*----- PROTECTED REGION ID(HdbEventSubscriber::constructor_2) ENABLED START -----*/

        init_device();

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::constructor_2
    }
    //--------------------------------------------------------
    HdbEventSubscriber::HdbEventSubscriber(Tango::DeviceClass *cl, const char *s, const char *d)
        : TANGO_BASE_CLASS(cl, s, d)
    {
        /*----- PROTECTED REGION ID(HdbEventSubscriber::constructor_3) ENABLED START -----*/

        init_device();

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::constructor_3
    }

    //--------------------------------------------------------
    /**
     *	Method      : HdbEventSubscriber::delete_device()
     *	Description : will be called at device destruction or at init command
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::delete_device()
    {
        DEBUG_STREAM << "HdbEventSubscriber::delete_device() " << device_name << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::delete_device) ENABLED START -----*/

        //	Delete device allocated objects
        INFO_STREAM << "-------- Delete device's allocated object --------" << endl;
        pause();
        INFO_STREAM << "-------- Delete device's allocated object done !--------" << endl;
        //Tango::client_leavefunc();

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::delete_device
        delete[] attr_StatisticsResetTime_read;
        delete[] attr_Context_read;
        delete[] attr_ContextsList_read;
    }

    //--------------------------------------------------------
    /**
     *	Method      : HdbEventSubscriber::init_device()
     *	Description : will be called at device initialization.
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::init_device()
    {
        DEBUG_STREAM << "HdbEventSubscriber::init_device() create device " << device_name << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::init_device_before) ENABLED START -----*/

        //	Initialization before get_device_property() call


        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::init_device_before


        //	Get the device properties from database
        get_device_property();

        attr_StatisticsResetTime_read = new Tango::DevDouble[1];
        attr_Context_read = new Tango::DevString[1];
        attr_ContextsList_read = new Tango::DevString[1000];
        /*----- PROTECTED REGION ID(HdbEventSubscriber::init_device) ENABLED START -----*/
        //	Initialize device
        initialized = false;
        set_state(Tango::MOVING);
        set_status("Initializing....");

        //	Create one event handler by HDB access device
        INFO_STREAM << "HdbEventSubscriber id="<<omni_thread::self()->id()<<endl;
        // Initialize the context list.
        // This must be done before HdbDevice creation
        // as to set correctly the current_context_index
        ContextMap::init(contextsList, contexts);
        
        delete[] attr_ContextsList_read;
        attr_ContextsList_read = new Tango::DevString[contexts.size()];
        
        for(size_t i = 0; i < contexts.size(); ++i)
        {
            attr_ContextsList_read[i] = const_cast<char*>(contexts[i].c_str());
        }
        
        // If the default strategy is not defined, stop right away.
        if(!ContextMap::defined(defaultStrategy))
        {
            ERROR_STREAM << "HdbEventSubscriber::init_device(): FAILED due to bad DefaultStrategy configuration: " << defaultStrategy << " is not present in ContextsList";
            exit(-1);
        }
        
        string	status;
        hdb_dev = std::make_shared<HdbDevice>(
                subscribeRetryPeriod
                , pollingThreadPeriod
                , statisticsTimeWindow
                , checkPeriodicTimeoutDelay
                , subscribeChangeAsFallback
                , attributeListFile
                , ContextMap::at(ContextMap::index(defaultStrategy))
                , this);

        // Sets the context from the context object.
        *attr_Context_read = const_cast<char*>(hdb_dev->get_context().get_decl_name().c_str());

        attr_AttributeRecordFreq_read = &hdb_dev->AttributeRecordFreq;
        attr_AttributeFailureFreq_read = &hdb_dev->AttributeFailureFreq;
        attr_AttributeRecordFreqList_read = &hdb_dev->AttributeRecordFreqList[0];
        attr_AttributeFailureFreqList_read = &hdb_dev->AttributeFailureFreqList[0];
        attr_AttributeEventNumberList_read = &hdb_dev->AttributeEventNumberList[0];

        try
        {
            hdb_dev->initialize();
        }
        catch(Tango::DevFailed &e)
        {
            status += "PushThread:\n";
            status += e.errors[0].desc;
        }
        //	Check if WARNING
        if (!hdb_dev->list_file_error.empty())
        {
            set_state(Tango::FAULT);
            set_status(hdb_dev->list_file_error);
        }
        //	Set state and status if something wrong
        else if (status.length()>0)
        {
            set_state(Tango::ALARM);
            set_status(status);
            INFO_STREAM << status << endl;
        }
        timespec now{};
        clock_gettime(CLOCK_MONOTONIC, &now);
        double dnow = (now.tv_sec) + ((double)(now.tv_nsec))/s_to_ns_factor;
        last_statistics_reset_time = dnow;

        initialized = true;

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::init_device
    }

    //--------------------------------------------------------
    /**
     *	Method      : HdbEventSubscriber::get_device_property()
     *	Description : Read database to initialize property data members.
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::get_device_property()
    {
        /*----- PROTECTED REGION ID(HdbEventSubscriber::get_device_property_before) ENABLED START -----*/

        //	Initialize property data members
        subscribeRetryPeriod = 60;
        subscribeChangeAsFallback = false;

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::get_device_property_before


        //	Read device properties from database.
        Tango::DbData	dev_prop;
        dev_prop.push_back(Tango::DbDatum("SubscribeRetryPeriod"));
        dev_prop.push_back(Tango::DbDatum("AttributeList"));
        dev_prop.push_back(Tango::DbDatum("StatisticsTimeWindow"));
        dev_prop.push_back(Tango::DbDatum("CheckPeriodicTimeoutDelay"));
        dev_prop.push_back(Tango::DbDatum("PollingThreadPeriod"));
        dev_prop.push_back(Tango::DbDatum("LibConfiguration"));
        dev_prop.push_back(Tango::DbDatum("ContextsList"));
        dev_prop.push_back(Tango::DbDatum("DefaultStrategy"));
        dev_prop.push_back(Tango::DbDatum("SubscribeChangeAsFallback"));
        dev_prop.push_back(Tango::DbDatum("AttributeListFile"));

        //	is there at least one property to be read ?
        if (!dev_prop.empty())
        {
            //	Call database and extract values
            if (Tango::Util::instance()->_UseDb==true)
                get_db_device()->get_property(dev_prop);

            //	get instance on HdbEventSubscriberClass to get class property
            Tango::DbDatum	def_prop, cl_prop;
            HdbEventSubscriberClass	*ds_class =
                (static_cast<HdbEventSubscriberClass *>(get_device_class()));
            int	i = -1;

            //	Try to initialize SubscribeRetryPeriod from class property
            cl_prop = ds_class->get_class_property(dev_prop[++i].name);
            if (cl_prop.is_empty()==false)	cl_prop  >>  subscribeRetryPeriod;
            else {
                //	Try to initialize SubscribeRetryPeriod from default device value
                def_prop = ds_class->get_default_device_property(dev_prop[i].name);
                if (def_prop.is_empty()==false)	def_prop  >>  subscribeRetryPeriod;
            }
            //	And try to extract SubscribeRetryPeriod value from database
            if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  subscribeRetryPeriod;

            //	Try to initialize AttributeList from class property
            cl_prop = ds_class->get_class_property(dev_prop[++i].name);
            if (cl_prop.is_empty()==false)	cl_prop  >>  attributeList;
            else {
                //	Try to initialize AttributeList from default device value
                def_prop = ds_class->get_default_device_property(dev_prop[i].name);
                if (def_prop.is_empty()==false)	def_prop  >>  attributeList;
            }
            //	And try to extract AttributeList value from database
            if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  attributeList;

            //	Try to initialize StatisticsTimeWindow from class property
            cl_prop = ds_class->get_class_property(dev_prop[++i].name);
            if (cl_prop.is_empty()==false)	cl_prop  >>  statisticsTimeWindow;
            else {
                //	Try to initialize StatisticsTimeWindow from default device value
                def_prop = ds_class->get_default_device_property(dev_prop[i].name);
                if (def_prop.is_empty()==false)	def_prop  >>  statisticsTimeWindow;
            }
            //	And try to extract StatisticsTimeWindow value from database
            if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  statisticsTimeWindow;

            //	Try to initialize CheckPeriodicTimeoutDelay from class property
            cl_prop = ds_class->get_class_property(dev_prop[++i].name);
            if (cl_prop.is_empty()==false)	cl_prop  >>  checkPeriodicTimeoutDelay;
            else {
                //	Try to initialize CheckPeriodicTimeoutDelay from default device value
                def_prop = ds_class->get_default_device_property(dev_prop[i].name);
                if (def_prop.is_empty()==false)	def_prop  >>  checkPeriodicTimeoutDelay;
            }
            //	And try to extract CheckPeriodicTimeoutDelay value from database
            if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  checkPeriodicTimeoutDelay;

            //	Try to initialize PollingThreadPeriod from class property
            cl_prop = ds_class->get_class_property(dev_prop[++i].name);
            if (cl_prop.is_empty()==false)	cl_prop  >>  pollingThreadPeriod;
            else {
                //	Try to initialize PollingThreadPeriod from default device value
                def_prop = ds_class->get_default_device_property(dev_prop[i].name);
                if (def_prop.is_empty()==false)	def_prop  >>  pollingThreadPeriod;
            }
            //	And try to extract PollingThreadPeriod value from database
            if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  pollingThreadPeriod;

            //	Try to initialize LibConfiguration from class property
            cl_prop = ds_class->get_class_property(dev_prop[++i].name);
            if (cl_prop.is_empty()==false)	cl_prop  >>  libConfiguration;
            else {
                //	Try to initialize LibConfiguration from default device value
                def_prop = ds_class->get_default_device_property(dev_prop[i].name);
                if (def_prop.is_empty()==false)	def_prop  >>  libConfiguration;
            }
            //	And try to extract LibConfiguration value from database
            if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  libConfiguration;

            //	Try to initialize ContextsList from class property
            cl_prop = ds_class->get_class_property(dev_prop[++i].name);
            if (cl_prop.is_empty()==false)	cl_prop  >>  contextsList;
            else {
                //	Try to initialize ContextsList from default device value
                def_prop = ds_class->get_default_device_property(dev_prop[i].name);
                if (def_prop.is_empty()==false)	def_prop  >>  contextsList;
            }
            //	And try to extract ContextsList value from database
            if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  contextsList;

            //	Try to initialize DefaultStrategy from class property
            cl_prop = ds_class->get_class_property(dev_prop[++i].name);
            if (cl_prop.is_empty()==false)	cl_prop  >>  defaultStrategy;
            else {
                //	Try to initialize DefaultStrategy from default device value
                def_prop = ds_class->get_default_device_property(dev_prop[i].name);
                if (def_prop.is_empty()==false)	def_prop  >>  defaultStrategy;
            }
            //	And try to extract DefaultStrategy value from database
            if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  defaultStrategy;

            //	Try to initialize SubscribeChangeAsFallback from class property
            cl_prop = ds_class->get_class_property(dev_prop[++i].name);
            if (cl_prop.is_empty()==false)	cl_prop  >>  subscribeChangeAsFallback;
            else {
                //	Try to initialize SubscribeChangeAsFallback from default device value
                def_prop = ds_class->get_default_device_property(dev_prop[i].name);
                if (def_prop.is_empty()==false)	def_prop  >>  subscribeChangeAsFallback;
            }
            //	And try to extract SubscribeChangeAsFallback value from database
            if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  subscribeChangeAsFallback;
		
            //	Try to initialize AttributeListFile from class property
            cl_prop = ds_class->get_class_property(dev_prop[++i].name);
            if (cl_prop.is_empty()==false)	cl_prop  >>  attributeListFile;
            else {
                //	Try to initialize AttributeListFile from default device value
                def_prop = ds_class->get_default_device_property(dev_prop[i].name);
                if (def_prop.is_empty()==false)	def_prop  >>  attributeListFile;
            }
            //	And try to extract AttributeListFile value from database
            if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  attributeListFile;
        }

        /*----- PROTECTED REGION ID(HdbEventSubscriber::get_device_property_after) ENABLED START -----*/

        //	Check device property data members init
        //DEBUG_STREAM << "hdbAccessDevice      = " << hdbAccessDevice << endl;
        DEBUG_STREAM << "subscribeRetryPeriod = " << subscribeRetryPeriod << endl;
        DEBUG_STREAM << "subscribeChangeAsFallback = " << subscribeChangeAsFallback << endl;

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::get_device_property_after
    }

    //--------------------------------------------------------
    /**
     *	Method      : HdbEventSubscriber::always_executed_hook()
     *	Description : method always executed before any command is executed
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::always_executed_hook()
    {
        DEBUG_STREAM << "HdbEventSubscriber::always_executed_hook()  " << device_name << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::always_executed_hook) ENABLED START -----*/

        //	code always executed before all requests
        //	Do not check state before end ofinitializing phase
        if (initialized)
        {
            Tango::DevState	state = hdb_dev->subcribing_state();
            set_state(state);

            if (state==Tango::ON)
                set_status("Everything is OK");
            else if(!hdb_dev->list_file_error.empty())
                set_status(hdb_dev->list_file_error);
            else if (state==Tango::ALARM)
                set_status("At least, one signal is faulty");
        }

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::always_executed_hook
    }

    //--------------------------------------------------------
    /**
     *	Method      : HdbEventSubscriber::read_attr_hardware()
     *	Description : Hardware acquisition for attributes
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_attr_hardware) ENABLED START -----*/

        //	Add your own code

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_attr_hardware
    }
    //--------------------------------------------------------
    /**
     *	Method      : HdbEventSubscriber::write_attr_hardware()
     *	Description : Hardware writing for attributes
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
    {
        DEBUG_STREAM << "HdbEventSubscriber::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::write_attr_hardware) ENABLED START -----*/

        //	Add your own code

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::write_attr_hardware
    }

    //--------------------------------------------------------
    /**
     *	Read attribute AttributeOkNumber related method
     *	Description: Number of archived attributes not in error
     *
     *	Data type:	Tango::DevLong
     *	Attr type:	Scalar
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeOkNumber(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeOkNumber(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeOkNumber) ENABLED START -----*/

        //	Set the attribute value
        attr.set_value(&hdb_dev->attr_AttributeOkNumber_read);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeOkNumber
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeNokNumber related method
     *	Description: Number of archived attributes in error
     *
     *	Data type:	Tango::DevLong
     *	Attr type:	Scalar
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeNokNumber(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeNokNumber(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeNokNumber) ENABLED START -----*/

        //	Set the attribute value
        attr.set_value(&hdb_dev->attr_AttributeNokNumber_read);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeNokNumber
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributePendingNumber related method
     *	Description: Number of attributes waiting to be archived
     *
     *	Data type:	Tango::DevLong
     *	Attr type:	Scalar
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributePendingNumber(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributePendingNumber(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributePendingNumber) ENABLED START -----*/

        //	Set the attribute value
        attr.set_value(&hdb_dev->AttributePendingNumber);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributePendingNumber
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeNumber related method
     *	Description: Number of configured attributes
     *
     *	Data type:	Tango::DevLong
     *	Attr type:	Scalar
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeNumber(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeNumber(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeNumber) ENABLED START -----*/

        //	Set the attribute value
        attr.set_value(&hdb_dev->attr_AttributeNumber_read);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeNumber
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeMaxStoreTime related method
     *	Description: Maximum storing time
     *
     *	Data type:	Tango::DevDouble
     *	Attr type:	Scalar
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeMaxStoreTime(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeMaxStoreTime(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeMaxStoreTime) ENABLED START -----*/
        //	Set the attribute value
        attr.set_value(&hdb_dev->attr_AttributeMaxStoreTime_read);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeMaxStoreTime
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeMinStoreTime related method
     *	Description: Minimum storing time
     *
     *	Data type:	Tango::DevDouble
     *	Attr type:	Scalar
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeMinStoreTime(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeMinStoreTime(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeMinStoreTime) ENABLED START -----*/
        //	Set the attribute value
        attr.set_value(&hdb_dev->attr_AttributeMinStoreTime_read);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeMinStoreTime
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeMaxProcessingTime related method
     *	Description: Maximum processing (from event reception to storage) time
     *
     *	Data type:	Tango::DevDouble
     *	Attr type:	Scalar
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeMaxProcessingTime(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeMaxProcessingTime(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeMaxProcessingTime) ENABLED START -----*/
        //	Set the attribute value
        attr.set_value(&hdb_dev->attr_AttributeMaxProcessingTime_read);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeMaxProcessingTime
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeMinProcessingTime related method
     *	Description: Minimum processing (from event reception to storage) time
     *
     *	Data type:	Tango::DevDouble
     *	Attr type:	Scalar
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeMinProcessingTime(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeMinProcessingTime(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeMinProcessingTime) ENABLED START -----*/
        //	Set the attribute value
        attr.set_value(&hdb_dev->attr_AttributeMinProcessingTime_read);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeMinProcessingTime
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeRecordFreq related method
     *	Description: Record frequency
     *
     *	Data type:	Tango::DevDouble
     *	Attr type:	Scalar
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeRecordFreq(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeRecordFreq(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeRecordFreq) ENABLED START -----*/
        //	Set the attribute value
        if(*attr_AttributeRecordFreq_read == -1)
            attr.set_quality(Tango::ATTR_INVALID);
        else
            attr.set_value_date_quality(attr_AttributeRecordFreq_read, hdb_dev->get_last_stat(), Tango::ATTR_VALID);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeRecordFreq
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeFailureFreq related method
     *	Description: Failure frequency
     *
     *	Data type:	Tango::DevDouble
     *	Attr type:	Scalar
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeFailureFreq(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeFailureFreq(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeFailureFreq) ENABLED START -----*/
        //	Set the attribute value
        if(*attr_AttributeFailureFreq_read == -1)
            attr.set_quality(Tango::ATTR_INVALID);
        else
            attr.set_value_date_quality(attr_AttributeFailureFreq_read, hdb_dev->get_last_stat(), Tango::ATTR_VALID);
        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeFailureFreq
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeStartedNumber related method
     *	Description: Number of archived attributes started
     *
     *	Data type:	Tango::DevLong
     *	Attr type:	Scalar
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeStartedNumber(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeStartedNumber(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeStartedNumber) ENABLED START -----*/
        //	Set the attribute value
        attr.set_value(&hdb_dev->attr_AttributeStartedNumber_read);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeStartedNumber
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeStoppedNumber related method
     *	Description: Number of archived attributes stopped
     *
     *	Data type:	Tango::DevLong
     *	Attr type:	Scalar
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeStoppedNumber(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeStoppedNumber(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeStoppedNumber) ENABLED START -----*/
        //	Set the attribute value
        attr.set_value(&hdb_dev->attr_AttributeStoppedNumber_read);
        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeStoppedNumber
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeMaxPendingNumber related method
     *	Description: Max number of attributes waiting to be archived
     *
     *	Data type:	Tango::DevLong
     *	Attr type:	Scalar
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeMaxPendingNumber(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeMaxPendingNumber(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeMaxPendingNumber) ENABLED START -----*/
        //	Set the attribute value
        attr.set_value(&hdb_dev->AttributeMaxPendingNumber);
        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeMaxPendingNumber
    }
    //--------------------------------------------------------
    /**
     *	Read attribute StatisticsResetTime related method
     *	Description: Seconds elapsed since the last statistics reset
     *
     *	Data type:	Tango::DevDouble
     *	Attr type:	Scalar
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_StatisticsResetTime(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_StatisticsResetTime(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_StatisticsResetTime) ENABLED START -----*/
        timespec now{};
        clock_gettime(CLOCK_MONOTONIC, &now);
        double dnow = (now.tv_sec) + ((double)(now.tv_nsec))/s_to_ns_factor;
        *attr_StatisticsResetTime_read = dnow - last_statistics_reset_time;
        //	Set the attribute value
        attr.set_value(attr_StatisticsResetTime_read);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_StatisticsResetTime
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributePausedNumber related method
     *	Description: Number of archived attributes paused
     *
     *	Data type:	Tango::DevLong
     *	Attr type:	Scalar
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributePausedNumber(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributePausedNumber(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributePausedNumber) ENABLED START -----*/
        //	Set the attribute value
        attr.set_value(&hdb_dev->attr_AttributePausedNumber_read);
        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributePausedNumber
    }
    //--------------------------------------------------------
    /**
     *	Read attribute Context related method
     *	Description: 
     *
     *	Data type:	Tango::DevString
     *	Attr type:	Scalar
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_Context(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_Context(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_Context) ENABLED START -----*/
        //	Set the attribute value
        attr.set_value(attr_Context_read);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_Context
    }
    //--------------------------------------------------------
    /**
     *	Write attribute Context related method
     *	Description: 
     *
     *	Data type:	Tango::DevString
     *	Attr type:	Scalar
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::write_Context(Tango::WAttribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::write_Context(Tango::WAttribute &attr) entering... " << endl;
        //	Retrieve write value
        Tango::DevString w_val = nullptr;
        attr.get_write_value(w_val);
        /*----- PROTECTED REGION ID(HdbEventSubscriber::write_Context) ENABLED START -----*/
        string argin(w_val);

        // Might throw if the context does not exists
        hdb_dev->set_context(argin);

        *attr_Context_read = const_cast<char*>(hdb_dev->get_context().get_decl_name().c_str());

        hdb_dev->start_attributes();

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::write_Context
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeList related method
     *	Description: Returns the configured attribute list
     *
     *	Data type:	Tango::DevString
     *	Attr type:	Spectrum max = 10000
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeList(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeList(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeList) ENABLED START -----*/

        //	Set the attribute value
        attr.set_value(hdb_dev->attr_AttributeList_read, hdb_dev->attribute_list_str_size);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeList
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeOkList related method
     *	Description: Returns the attributes not on error list
     *
     *	Data type:	Tango::DevString
     *	Attr type:	Spectrum max = 10000
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeOkList(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeOkList(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeOkList) ENABLED START -----*/

        //	Set the attribute value
        attr.set_value(hdb_dev->attr_AttributeOkList_read, hdb_dev->attribute_ok_list_str_size);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeOkList
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeNokList related method
     *	Description: Returns the attributes on error list
     *
     *	Data type:	Tango::DevString
     *	Attr type:	Spectrum max = 10000
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeNokList(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeNokList(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeNokList) ENABLED START -----*/

        //	Set the attribute value
        attr.set_value(hdb_dev->attr_AttributeNokList_read, hdb_dev->attribute_nok_list_str_size);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeNokList
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributePendingList related method
     *	Description: Returns the list attributes waiting to be archived
     *
     *	Data type:	Tango::DevString
     *	Attr type:	Spectrum max = 10000
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributePendingList(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributePendingList(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributePendingList) ENABLED START -----*/

        //	Set the attribute value
        attr.set_value(hdb_dev->attr_AttributePendingList_read, hdb_dev->attribute_pending_list_str_size);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributePendingList
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeRecordFreqList related method
     *	Description: Returns the list of record frequencies
     *
     *	Data type:	Tango::DevDouble
     *	Attr type:	Spectrum max = 10000
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeRecordFreqList(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeRecordFreqList(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeRecordFreqList) ENABLED START -----*/
        if(*attr_AttributeRecordFreq_read == -1)
            attr.set_quality(Tango::ATTR_INVALID);
        //	Set the attribute value
        attr.set_value_date_quality(attr_AttributeRecordFreqList_read, hdb_dev->get_last_stat(), Tango::ATTR_VALID, hdb_dev->attr_AttributeNumber_read);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeRecordFreqList
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeFailureFreqList related method
     *	Description: Returns the list of failure frequencies
     *
     *	Data type:	Tango::DevDouble
     *	Attr type:	Spectrum max = 10000
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeFailureFreqList(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeFailureFreqList(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeFailureFreqList) ENABLED START -----*/
        if(*attr_AttributeFailureFreq_read == -1)
            attr.set_quality(Tango::ATTR_INVALID);
        //	Set the attribute value
        attr.set_value_date_quality(attr_AttributeFailureFreqList_read, hdb_dev->get_last_stat(), Tango::ATTR_VALID, hdb_dev->attr_AttributeNumber_read);
        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeFailureFreqList
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeStartedList related method
     *	Description: Returns the attributes started list
     *
     *	Data type:	Tango::DevString
     *	Attr type:	Spectrum max = 10000
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeStartedList(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeStartedList(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeStartedList) ENABLED START -----*/
        //	Set the attribute value
        attr.set_value(hdb_dev->attr_AttributeStartedList_read, hdb_dev->attribute_started_list_str_size);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeStartedList
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeStoppedList related method
     *	Description: Returns the attributes stopped list
     *
     *	Data type:	Tango::DevString
     *	Attr type:	Spectrum max = 10000
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeStoppedList(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeStoppedList(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeStoppedList) ENABLED START -----*/
        //	Set the attribute value
        attr.set_value(hdb_dev->attr_AttributeStoppedList_read, hdb_dev->attribute_stopped_list_str_size);
        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeStoppedList
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeEventNumberList related method
     *	Description: Returns the list of numbers of events received
     *
     *	Data type:	Tango::DevLong
     *	Attr type:	Spectrum max = 10000
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeEventNumberList(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeEventNumberList(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeEventNumberList) ENABLED START -----*/
        //	Set the attribute value
        attr.set_value(attr_AttributeEventNumberList_read, hdb_dev->attr_AttributeNumber_read);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeEventNumberList
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeErrorList related method
     *	Description: Returns the list of attribute errors
     *
     *	Data type:	Tango::DevString
     *	Attr type:	Spectrum max = 10000
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeErrorList(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeErrorList(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeErrorList) ENABLED START -----*/
        //	Set the attribute value
        attr.set_value(hdb_dev->attr_AttributeErrorList_read, hdb_dev->attribute_error_list_str_size);
        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeErrorList
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributePausedList related method
     *	Description: Returns the attributes stopped list
     *
     *	Data type:	Tango::DevString
     *	Attr type:	Spectrum max = 10000
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributePausedList(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributePausedList(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributePausedList) ENABLED START -----*/
        //	Set the attribute value
        attr.set_value(hdb_dev->attr_AttributePausedList_read, hdb_dev->attribute_paused_list_str_size);
        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributePausedList
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeStrategyList related method
     *	Description: Returns the list of attribute strategy
     *
     *	Data type:	Tango::DevString
     *	Attr type:	Spectrum max = 10000
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeStrategyList(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeStrategyList(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeStrategyList) ENABLED START -----*/
        //	Set the attribute value
        attr.set_value(hdb_dev->attr_AttributeContextList_read, hdb_dev->attribute_context_list_str_size);
        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeStrategyList
    }
    //--------------------------------------------------------
    /**
     *	Read attribute ContextsList related method
     *	Description: 
     *
     *	Data type:	Tango::DevString
     *	Attr type:	Spectrum max = 1000
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_ContextsList(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_ContextsList(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_ContextsList) ENABLED START -----*/
        //	Set the attribute value
        attr.set_value(attr_ContextsList_read, contextsList.size());

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_ContextsList
    }
    //--------------------------------------------------------
    /**
     *	Read attribute AttributeTTLList related method
     *	Description: Returns the list of attribute strategy
     *
     *	Data type:	Tango::DevULong
     *	Attr type:	Spectrum max = 10000
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::read_AttributeTTLList(Tango::Attribute &attr)
    {
        DEBUG_STREAM << "HdbEventSubscriber::read_AttributeTTLList(Tango::Attribute &attr) entering... " << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::read_AttributeTTLList) ENABLED START -----*/
        //	Set the attribute value
        attr.set_value(hdb_dev->attr_AttributeTTLList_read, hdb_dev->attr_AttributeNumber_read);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::read_AttributeTTLList
    }

    //--------------------------------------------------------
    /**
     *	Method      : HdbEventSubscriber::add_dynamic_attributes()
     *	Description : Create the dynamic attributes if any
     *                for specified device.
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::add_dynamic_attributes()
    {
        /*----- PROTECTED REGION ID(HdbEventSubscriber::add_dynamic_attributes) ENABLED START -----*/

        //	Add your own code to create and add dynamic attributes if any

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::add_dynamic_attributes
    }

    //--------------------------------------------------------
    /**
     *	Command AttributeAdd related method
     *	Description: Add a new attribute to archive in HDB.
     *
     *	@param argin Attribute name, strategy, data_type, data_format, write_type 
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::attribute_add(const Tango::DevVarStringArray *argin)
    {
        DEBUG_STREAM << "HdbEventSubscriber::AttributeAdd()  - " << device_name << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::attribute_add) ENABLED START -----*/

        //	Add your own code
        string	signame;
        vector<string> contexts;
        int data_type = 0;
        int data_format = 0;
        int write_type = 0;
        bool context_error = false;
        string requested_strategy;
        string applied_strategy;
        if(argin->length() > 0)
        {
            signame = string((*argin)[0]);
        }

        if(argin->length() > 1)
        {
            string context((*argin)[1]);
            if(context.length() > 0)
            {
                requested_strategy += context;

                vector<string> res;
                HdbDevice::string_explode(context, "|", res);

                for(const auto& context : res)
                {
                    if(!ContextMap::defined(context))
                    {
                        context_error = true;
                    }
                    else
                    {
                        contexts.push_back(context);
                    }
                }
            }
        }
        
        if(contexts.empty())
            contexts.push_back(defaultStrategy);
        
        // Some data is not provided, get it from the database
        if(argin->length() < 5)
        {
            string::size_type idx = signame.find_last_of('/');
            if (idx == string::npos)
                Tango::Except::throw_exception(
                        (const char *)"SyntaxError",
                        "Syntax error in signal name",
                        (const char *)__func__);
            
            string devname = signame.substr(0, idx);
            string attname = signame.substr(idx+1);
            
            std::unique_ptr<Tango::DeviceProxy> dp = std::unique_ptr<Tango::DeviceProxy>(new Tango::DeviceProxy(devname));

            Tango::AttributeInfo info = dp->get_attribute_config(attname);
            data_type = info.data_type;
            data_format = info.data_format;
            write_type = info.writable;
        }
        // In the case some of them are provided but not all, we still keep the one we got from the database
        // configuration. We could override them by the provided values, but if there is a difference
        // in the value provided and the one found in the db we are in a bit of trouble.
        else
        {
            string s_data_type((*argin)[2]);
            try
            {
                stringstream val;
                val << s_data_type;
                val >> data_type;
            }
            catch(...)
            {
                DEBUG_STREAM << __func__ << ": error extracting data_type from '" << s_data_type << "'";
            }

            string s_data_format((*argin)[3]);
            try
            {
                stringstream val;
                val << s_data_format;
                val >> data_format;
            }
            catch(...)
            {
                DEBUG_STREAM << __func__ << ": error extracting data_format from '" << s_data_format << "'";
            }

            string s_write_type((*argin)[4]);
            try
            {
                stringstream val;
                val << s_write_type;
                val >> write_type;
            }
            catch(...)
            {
                DEBUG_STREAM << __func__ << ": error extracting write_type from '" << s_write_type << "'";
            }
        }

        hdb_dev->add(signame, contexts, data_type, data_format, write_type);

        if(context_error)
        {
            for(auto its=contexts.begin(); its!=contexts.end(); ++its)
            {
                applied_strategy += *its;
                if(its != contexts.end()-1)
                    applied_strategy += string("|");
            }
            Tango::Except::throw_exception(
                    (const char *)"BadStrategy",
                    "Requested strategy: " + requested_strategy + "\nApplied strategy: " + applied_strategy,
                    (const char *)__func__);
        }

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::attribute_add
    }
    //--------------------------------------------------------
    /**
     *	Command AttributeRemove related method
     *	Description: Remove attribute from configuration.
     *
     *	@param argin Attribute name
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::attribute_remove(Tango::DevString argin)
    {
        DEBUG_STREAM << "HdbEventSubscriber::AttributeRemove()  - " << device_name << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::attribute_remove) ENABLED START -----*/

        //	Add your own code
        const string sig(argin);
        string signame;
        hdb_dev->fix_tango_host(sig, signame);

        bool is_running = false;
        bool is_paused = false;
        try
        {
            hdb_dev->shared->veclock.readerIn();
            is_running = hdb_dev->shared->is_running(signame);
            is_paused = hdb_dev->shared->is_paused(signame);
            hdb_dev->shared->veclock.readerOut();
        }
        catch(Tango::DevFailed &e)
        {
            hdb_dev->shared->veclock.readerOut();
            INFO_STREAM << __func__ << ": Failed to check is_running or is_paused for " << signame;
            Tango::Except::re_throw_exception(e,
                    (const char *)"BadSignalName",
                    "Signal " + signame + " NOT subscribed",
                    (const char *)__func__);
        }
        if(is_running || is_paused)
        {
            hdb_dev->shared->stop(signame);
            hdb_dev->push_thread->stop_attr(signame);
        }
        hdb_dev->remove(signame);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::attribute_remove
    }
    //--------------------------------------------------------
    /**
     *	Command AttributeStatus related method
     *	Description: Read a attribute status.
     *
     *	@param argin The attribute name
     *	@returns The attribute status.
     */
    //--------------------------------------------------------
    Tango::DevString HdbEventSubscriber::attribute_status(Tango::DevString argin)
    {
        Tango::DevString argout = nullptr;
        DEBUG_STREAM << "HdbEventSubscriber::AttributeStatus()  - " << device_name << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::attribute_status) ENABLED START -----*/

        //	Add your own code
        struct timeval tv{};
        struct tm *nowtm = nullptr;
        char buf[64];
        size_t strfret = 0;

        time_t nowtime = 0;
        const string sig(argin);
        string signame;
        hdb_dev->fix_tango_host(sig, signame);

        stringstream attr_status;
        attr_status << "Event status       : "<<hdb_dev->get_sig_status(signame);
        attr_status << endl;
        attr_status << "Events engine      : "<<(hdb_dev->shared->get_sig_source(signame) ? "ZMQ" : "Notifd");
        attr_status << endl;
        bool is_running = false;
        bool is_paused = false;
        try
        {
            hdb_dev->shared->veclock.readerIn();
            is_running = hdb_dev->shared->is_running(signame);
            is_paused = hdb_dev->shared->is_paused(signame);
            attr_status << "Archiving          : "<<((is_running && !is_paused) ? "Started" : (is_paused ? "Paused" : "Stopped"));
            hdb_dev->shared->veclock.readerOut();
        }
        catch(Tango::DevFailed &e)
        {
            hdb_dev->shared->veclock.readerOut();
            INFO_STREAM << __func__ << ": Failed to check is_running or is_paused for " << signame;
            Tango::Except::re_throw_exception(e,
                    (const char *)"BadSignalName",
                    "Signal " + signame + " NOT subscribed",
                    (const char *)__func__);
        }
        attr_status << endl;

        tv = hdb_dev->shared->get_last_okev(signame);
        
        uint32_t ok_ev = hdb_dev->shared->get_ok_event(signame);

        attr_status << "Event OK counter   : "<<ok_ev<<" - "<< format_date(tv, ok_ev);
        attr_status << endl;

        tv = hdb_dev->shared->get_last_nokev(signame);
        uint32_t nok_ev = hdb_dev->shared->get_nok_event(signame);
        
        attr_status << "Event NOK counter  : "<<nok_ev<<" - "<< format_date(tv, nok_ev);
        attr_status << endl;

        tv = hdb_dev->push_thread->get_last_nokdb(signame);
        uint32_t nok_db = hdb_dev->push_thread->get_nok_db(signame);
        
        attr_status << "DB ERRORS counter  : "<<nok_db<<" - "<< format_date(tv, nok_db);
        attr_status << endl;

        attr_status << "Storing time AVG   : "<<fixed<<hdb_dev->push_thread->get_avg_store_time(signame)<<"s";
        attr_status << endl;
        attr_status << "Processing time AVG: "<<fixed<<hdb_dev->push_thread->get_avg_process_time(signame)<<"s";
        argout  = new char[attr_status.str().length()+1];
        strcpy(argout, attr_status.str().c_str());

        /*
           vector<string>	names   = hdb_dev->shared->get_sig_list();
           vector<bool>	sources = hdb_dev->shared->get_sig_source_list();	//1=ZMQ, 0=notifd
           argout = new Tango::DevVarLongStringArray();
           argout->svalue.length(names.size());
           argout->lvalue.length(names.size());
           for (unsigned int i=0 ; i<names.size() ; i++)
           {
           argout->svalue[i] = CORBA::string_dup(names[i].c_str());
           argout->lvalue[i] = sources[i];
           }
           */

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::attribute_status
        return argout;
    }
    //--------------------------------------------------------
    /**
     *	Command Start related method
     *	Description: Start archiving
     *
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::start()
    {
        DEBUG_STREAM << "HdbEventSubscriber::Start()  - " << device_name << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::start) ENABLED START -----*/

        //	Add your own code
        
        hdb_dev->start_attributes();
        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::start
    }
    //--------------------------------------------------------
    /**
     *	Command Stop related method
     *	Description: Stop archiving
     *
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::stop()
    {
        DEBUG_STREAM << "HdbEventSubscriber::Stop()  - " << device_name << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::stop) ENABLED START -----*/

        //	Add your own code

#if 0
        hdb_dev->shared->stop_all();
        hdb_dev->push_thread->stop_all();
#else
        vector<string> att_list_tmp;
        hdb_dev->get_sig_list(att_list_tmp);
        for (const auto& att : att_list_tmp)
            stop_attribute(att);
#endif
        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::stop
    }
    //--------------------------------------------------------
    /**
     *	Command AttributeStart related method
     *	Description: Start archiving single attribute
     *
     *	@param argin Attribute name
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::attribute_start(Tango::DevString argin)
    {
        DEBUG_STREAM << "HdbEventSubscriber::AttributeStart()  - " << device_name << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::attribute_start) ENABLED START -----*/
        const string attribute(argin);
        start_attribute(attribute);
        //	Add your own code

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::attribute_start
    }
    //--------------------------------------------------------
    /**
     *	Command AttributeStop related method
     *	Description: Stop archiving single attribute
     *
     *	@param argin Attribute name
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::attribute_stop(Tango::DevString argin)
    {
        DEBUG_STREAM << "HdbEventSubscriber::AttributeStop()  - " << device_name << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::attribute_stop) ENABLED START -----*/

        //	Add your own code

        const string signame(argin);
        stop_attribute(signame);
        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::attribute_stop
    }
    //--------------------------------------------------------
    /**
     *	Command ResetStatistics related method
     *	Description: Reset statistic counters
     *
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::reset_statistics()
    {
        DEBUG_STREAM << "HdbEventSubscriber::ResetStatistics()  - " << device_name << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::reset_statistics) ENABLED START -----*/

        //	Add your own code
        hdb_dev->reset_statistics();
        timespec now{};
        clock_gettime(CLOCK_MONOTONIC, &now);
        double dnow = (now.tv_sec) + ((double)(now.tv_nsec))/s_to_ns_factor;
        last_statistics_reset_time = dnow;

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::reset_statistics
    }
    //--------------------------------------------------------
    /**
     *	Command Pause related method
     *	Description: Pause archiving
     *
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::pause()
    {
        DEBUG_STREAM << "HdbEventSubscriber::Pause()  - " << device_name << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::pause) ENABLED START -----*/
        //	Add your own code
#if 0
        hdb_dev->shared->pause_all();
        hdb_dev->push_thread->pause_all();
#else
        vector<string> att_list_tmp;
        hdb_dev->get_sig_list(att_list_tmp);
        for (const auto& attr : att_list_tmp)
        {
            bool is_running = false;
            try
            {
                hdb_dev->shared->veclock.readerIn();
                is_running = hdb_dev->shared->is_running(attr);
                hdb_dev->shared->veclock.readerOut();
            }
            catch(Tango::DevFailed &e)
            {
                hdb_dev->shared->veclock.readerOut();
                INFO_STREAM << __func__ << ": Failed to check is_running for " << attr;
                continue;
            }
            if(is_running)
            {
                try
                {
                    pause_attribute(attr);
                }
                catch(Tango::DevFailed &e)
                {}
            }
        }
#endif
        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::pause
    }
    //--------------------------------------------------------
    /**
     *	Command AttributePause related method
     *	Description: Pause archiving single attribute
     *
     *	@param argin Attribute name
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::attribute_pause(Tango::DevString argin)
    {
        DEBUG_STREAM << "HdbEventSubscriber::AttributePause()  - " << device_name << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::attribute_pause) ENABLED START -----*/
        //	Add your own code
        const string sig(argin);
        pause_attribute(sig);
        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::attribute_pause
    }
    //--------------------------------------------------------
    /**
     *	Command SetAttributeStrategy related method
     *	Description: Update strategy associated to an already archived attribute.
     *
     *	@param argin Attribute name, strategy
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::set_attribute_strategy(const Tango::DevVarStringArray *argin)
    {
        DEBUG_STREAM << "HdbEventSubscriber::SetAttributeStrategy()  - " << device_name << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::set_attribute_strategy) ENABLED START -----*/

        //	Add your own code
        string	signame;
        vector<string> contexts;
        bool context_error = false;
        string requested_strategy;
        string applied_strategy;
        if(argin->length() > 0)
        {
            signame = string((*argin)[0]);
        }
        for(size_t i = 0; i < argin->length() -1; i++)
        {
            string context((*argin)[i+1]);
            if(context.length() > 0)
            {
                requested_strategy += context;
                if(i != argin->length() -2)
                    requested_strategy += string("|");
                vector<string> res;
                HdbDevice::string_explode(context, "|", res);

                for(const auto& context : res)
                {
                    if(!ContextMap::defined(context))
                    {
                        context_error = true;
                    }
                    else
                    {
                        contexts.push_back(context);
                    }
                }
            }
        }
        if(contexts.empty())
            contexts.push_back(defaultStrategy);
        hdb_dev->update(signame, contexts);

        if(context_error)
        {
            for(auto its=contexts.begin(); its!=contexts.end(); its++)
            {
                applied_strategy += *its;
                if(its != contexts.end()-1)
                    applied_strategy += string("|");
            }
            Tango::Except::throw_exception(
                    (const char *)"BadStrategy",
                    "Requested strategy: " + requested_strategy + "\nApplied strategy: " + applied_strategy,
                    (const char *)__func__);
        }
        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::set_attribute_strategy
    }
    //--------------------------------------------------------
    /**
     *	Command GetAttributeStrategy related method
     *	Description: Read a attribute contexts.
     *
     *	@param argin The attribute name
     *	@returns The attribute contexts.
     */
    //--------------------------------------------------------
    Tango::DevString HdbEventSubscriber::get_attribute_strategy(Tango::DevString argin)
    {
        Tango::DevString argout = nullptr;
        DEBUG_STREAM << "HdbEventSubscriber::GetAttributeStrategy()  - " << device_name << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::get_attribute_strategy) ENABLED START -----*/

        //	Add your own code
        const string sig(argin);
        string signame;
        hdb_dev->fix_tango_host(sig, signame);

        stringstream attr_context;
        attr_context << hdb_dev->shared->get_sig_context(signame);

        argout  = new char[attr_context.str().length()+1];
        strcpy(argout, attr_context.str().c_str());

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::get_attribute_strategy
        return argout;
    }
    //--------------------------------------------------------
    /**
     *	Command StopFaulty related method
     *	Description: Stop archiving faulty attributes
     *
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::stop_faulty()
    {
        DEBUG_STREAM << "HdbEventSubscriber::StopFaulty()  - " << device_name << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::stop_faulty) ENABLED START -----*/

        //	Add your own code
        vector<string> att_list_tmp;
        hdb_dev->get_sig_on_error_list(att_list_tmp);
        for (const auto& att : att_list_tmp)
        {
            stop_attribute(att);
        }
        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::stop_faulty
    }
    //--------------------------------------------------------
    /**
     *	Command SetAttributeTTL related method
     *	Description: Update TTL associated to an already archived attribute.
     *
     *	@param argin Attribute name, TTL
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::set_attribute_ttl(const Tango::DevVarStringArray *argin)
    {
        DEBUG_STREAM << "HdbEventSubscriber::SetAttributeTTL()  - " << device_name << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::set_attribute_ttl) ENABLED START -----*/

        //	Add your own code
        string	signame;
        Tango::DevULong ttl = DEFAULT_TTL;
        if(argin->length() > 0)
        {
            signame = string((*argin)[0]);
        }
        if(argin->length() > 1)
        {
            string s_ttl = string((*argin)[1]);
            try
            {
                stringstream val;
                val << s_ttl;
                val >> ttl;
            }
            catch(...)
            {
                DEBUG_STREAM << __func__ << ": error extracting ttl from '" << s_ttl << "'";
            }
        }
        DEBUG_STREAM << __func__<<": before updatettl name="<<signame<<" ttl="<<ttl;
        hdb_dev->updatettl(signame, ttl);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::set_attribute_ttl
    }
    //--------------------------------------------------------
    /**
     *	Command GetAttributeTTL related method
     *	Description: Read an attribute TTL.
     *
     *	@param argin The attribute name
     *	@returns The attribute TTL.
     */
    //--------------------------------------------------------
    Tango::DevULong HdbEventSubscriber::get_attribute_ttl(Tango::DevString argin)
    {
        Tango::DevULong argout = 0;
        DEBUG_STREAM << "HdbEventSubscriber::GetAttributeTTL()  - " << device_name << endl;
        /*----- PROTECTED REGION ID(HdbEventSubscriber::get_attribute_ttl) ENABLED START -----*/

        //	Add your own code
        const string sig(argin);
        string signame;
        hdb_dev->fix_tango_host(sig, signame);

        argout = hdb_dev->shared->get_sig_ttl(signame);

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::get_attribute_ttl
        return argout;
    }
    //--------------------------------------------------------
    /**
     *	Method      : HdbEventSubscriber::add_dynamic_commands()
     *	Description : Create the dynamic commands if any
     *                for specified device.
     */
    //--------------------------------------------------------
    void HdbEventSubscriber::add_dynamic_commands()
    {
        /*----- PROTECTED REGION ID(HdbEventSubscriber::add_dynamic_commands) ENABLED START -----*/

        //	Add your own code to create and add dynamic commands if any

        /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::add_dynamic_commands
    }

    /*----- PROTECTED REGION ID(HdbEventSubscriber::namespace_ending) ENABLED START -----*/

    //	Additional Methods

    void HdbEventSubscriber::stop_attribute(const std::string& attribute)
    {
        hdb_dev->stop_attribute(attribute);
    }

    void HdbEventSubscriber::start_attribute(const std::string& attribute)
    {
        hdb_dev->start_attribute(attribute);
    }

    void HdbEventSubscriber::pause_attribute(const std::string& attribute)
    {
        hdb_dev->pause_attribute(attribute);
    }
    
    auto HdbEventSubscriber::format_date(const timeval& tv, size_t ev) -> std::string
    {
        if(ev != 0)
        {
            std::tm nowtm = *localtime(&tv.tv_sec);
            std::ostringstream str_stream;
            str_stream.precision(6);
            str_stream.fill('0');

            str_stream << std::put_time(&nowtm, "%Y-%m-%d %H:%M:%S") << std::left << tv.tv_usec << std::endl;

            return str_stream.str();
        }
        return "YYYY-MM-DD HH:MM:SS.UUUUUU";
    }


    /*----- PROTECTED REGION END -----*/	//	HdbEventSubscriber::namespace_ending
} //	namespace
